#!/usr/bin/env python

import os
import argparse
import datetime

parser = argparse.ArgumentParser(description='option')
parser.add_argument('-n', dest='Name', default="")
parser.add_argument('-l', dest='RunList')
parser.add_argument('--Full', action='store_true')
parser.add_argument('-T', dest='NToy', default=100, type=int)
parser.add_argument('--no_hint', action='store_true')
parser.add_argument('--run', dest='Run')
parser.add_argument('--nmax', dest='NMax', default=0, type=int)
args = parser.parse_args()

pwd = os.getcwd()
CMSSW_BASE = os.environ['CMSSW_BASE']
SCRAM_ARCH = os.environ['SCRAM_ARCH']

cards = open(args.RunList).readlines()
NCARD = len(cards)

JobStartTime = datetime.datetime.now()
timestamp =  JobStartTime.strftime('%Y_%m_%d_%H%M%S')

JobName = timestamp
if args.Name!="":
  JobName += "__"+args.Name

print '#### Job directory :'
print 'cd '+JobName
print 'condor_submit submit.sh'
print 'cd ..'

FullPathJobDir = pwd+'/'+JobName+'/'
os.system('mkdir -p '+JobName+'/output/')

#### first write the executable

executable_filename = 'Combine_'+JobName+'.sh'
executable = open(pwd+'/'+JobName+'/'+executable_filename,'w')
print>>executable,'''#!/bin/bash
SECTION=`printf $1`
WORKDIR=`pwd`

#### Don't make root history
export ROOT_HIST=0

#### use cvmfs for root ####
export CMS_PATH=/cvmfs/cms.cern.ch
source $CMS_PATH/cmsset_default.sh
export SCRAM_ARCH={0}
cd {1}/src/
echo "@@@@ SCRAM_ARCH = "$SCRAM_ARCH
echo "@@@@ cmsswrel = "$cmsswrel
echo "@@@@ scram..."
eval `scramv1 runtime -sh`
cd -
source {2}/run_${{SECTION}}.sh
'''.format(SCRAM_ARCH,CMSSW_BASE,pwd+'/'+JobName)
executable.close()

#### Write jds

MemoryLine = ''
if args.Full:
  MemoryLine = 'request_memory = 8000\n'

NMaxLine = ''
if args.NMax:
  NMaxLine = 'concurrency_limits = n'+str(args.NMax)+'.'+os.getenv("USER")+'\n'

NToyLine = ' -T '+str(args.NToy)

jdsfile = open(pwd+'/'+JobName+'/submit.sh','w')
print>>jdsfile,'''executable = {1}
universe   = vanilla
arguments  = $(Process)
log = condor.log
getenv     = True
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
output = job_$(Process).log
error = job_$(Process).err
#transfer_output_files = higgsCombineTest.AsymptoticLimits.mH120.root
#transfer_output_remaps = "higgsCombineTest.AsymptoticLimits.mH120.root = output/hists_$(Process).root"
{2}
{3}
queue {0}
'''.format(str(NCARD), executable_filename, MemoryLine, NMaxLine)
jdsfile.close()

#### write job sh file

for i in range(0,NCARD):

  words = cards[i].strip('\n').split()

  card = words[0]

  runfile = open(pwd+'/'+JobName+'/run_'+str(i)+'.sh','w')

  shortcard = card.split('/')[-1]

  runfile.write('echo "Input datacard '+shortcard+'"\n')

  HintLine = ' -H AsymptoticLimits'
  if args.no_hint:
    HintLine = ''

  RangeLine = ''
  if len(words)>=3:
    rMin = float(words[1])
    rMax = float(words[2])
    if rMin>0 and rMax>0 and rMax>rMin:
      RangeLine = ' --rMin '+words[1]+' --rMax '+words[2]
      HintLine = ''

  #### Full CLs
  if args.Full:

    if args.Run=='Obs':
      print>>runfile,'''echo "#### Running observed limit"
combine -M HybridNew --LHCmode LHC-limits {0} {3} {1} {2}
'''.format(card,HintLine,RangeLine,NToyLine)
    else:
      print>>runfile,'''quant={2}
echo "#### Running expected limit with quant = "$quant
combine -M HybridNew --LHCmode LHC-limits {0} --expectedFromGrid $quant {4} {1} {3}
'''.format(card,HintLine,args.Run,RangeLine,NToyLine)

  #### AymptoticLimits
  else:

    #runfile.write('combine -M AsymptoticLimits '+card+'\n')
    runfile.write('combine -M AsymptoticLimits '+card+' --run expected\n')
    runfile.write('combine -M AsymptoticLimits '+card+' --run observed\n')


  runfile.close()















