#!/usr/bin/env python

import os
import argparse
import datetime

parser = argparse.ArgumentParser(description='option')
parser.add_argument('-n', dest='Name', default="")
parser.add_argument('-l', dest='RunList')
parser.add_argument('--Full', action='store_true')
parser.add_argument('--nmax', dest='NMax', default=0, type=int)
args = parser.parse_args()

pwd = os.getcwd()
CMSSW_BASE = os.environ['CMSSW_BASE']
SCRAM_ARCH = os.environ['SCRAM_ARCH']

cards = open(args.RunList).readlines()
NCARD = len(cards)

JobStartTime = datetime.datetime.now()
timestamp =  JobStartTime.strftime('%Y_%m_%d_%H%M%S')

JobName = timestamp
if args.Name!="":
  JobName += "__"+args.Name

print '#### Job directory :'
print 'cd '+JobName
print 'condor_submit submit.sh'
print 'cd ..'

FullPathJobDir = pwd+'/'+JobName+'/'
os.system('mkdir -p '+JobName+'/output/')

#### first write the executable

executable_filename = 'Combine_'+JobName+'.sh'
executable = open(pwd+'/'+JobName+'/'+executable_filename,'w')
print>>executable,'''#!/bin/bash
SECTION=`printf $1`
WORKDIR=`pwd`

#### Don't make root history
export ROOT_HIST=0

#### use cvmfs for root ####
export CMS_PATH=/cvmfs/cms.cern.ch
source $CMS_PATH/cmsset_default.sh
export SCRAM_ARCH={0}
cd {1}/src/
echo "@@@@ SCRAM_ARCH = "$SCRAM_ARCH
echo "@@@@ cmsswrel = "$cmsswrel
echo "@@@@ scram..."
eval `scramv1 runtime -sh`
cd -
source {2}/run_${{SECTION}}.sh
'''.format(SCRAM_ARCH,CMSSW_BASE,pwd+'/'+JobName)
executable.close()

#### Write jds

MemoryLine = ''
if args.Full:
  MemoryLine = 'request_memory = 8000\n'

NMaxLine = ''
if args.NMax:
  NMaxLine = 'concurrency_limits = n'+str(args.NMax)+'.'+os.getenv("USER")+'\n'

jdsfile = open(pwd+'/'+JobName+'/submit.sh','w')
print>>jdsfile,'''executable = {1}
universe   = vanilla
arguments  = $(Process)
log = condor.log
getenv     = True
should_transfer_files = YES
when_to_transfer_output = ON_EXIT
output = job_$(Process).log
error = job_$(Process).err
#transfer_output_files = higgsCombineTest.AsymptoticLimits.mH120.root
#transfer_output_remaps = "higgsCombineTest.AsymptoticLimits.mH120.root = output/hists_$(Process).root"
{2}
{3}
queue {0}
'''.format(str(NCARD), executable_filename, MemoryLine, NMaxLine)
jdsfile.close()

#### write job sh file

for i in range(0,NCARD):

  card = cards[i].strip('\n')

  runfile = open(pwd+'/'+JobName+'/run_'+str(i)+'.sh','w')

  shortcard = card.split('/')[-1]

  runfile.write('echo "Input datacard '+shortcard+'"\n')

  Channel = 'EE' if ('_EE_' in shortcard) else 'MuMu'
  SRMasking = ''
  if 'YearCombined' in shortcard:
    if ('Resolved' in shortcard) or ('Boosted' in shortcard):
      SRMasking = 'mask_Run2016_SR=1,mask_Run2017_SR=1,mask_Run2018_SR=1'
    else:
      SRMasking = 'mask_Run2016_%s_Boosted_SR=1,mask_Run2016_%s_Resolved_SR=1,mask_Run2017_%s_Boosted_SR=1,mask_Run2017_%s_Resolved_SR=1,mask_Run2018_%s_Boosted_SR=1,mask_Run2018_%s_Resolved_SR=1'%(Channel,Channel,Channel,Channel,Channel,Channel)

  else:
    if ('Resolved' in shortcard) or ('Boosted' in shortcard):
      SRMasking = 'mask_SR=1'
    else:
      SRMasking = 'mask_%s_Boosted_SR=1,mask_%s_Resolved_SR=1'%(Channel,Channel)
  SRUnMasking = SRMasking.replace('=1','=0')

  #### Full CLs
  if args.Full:
    #### TODO add obs later
    print>>runfile,'''echo "#### Running expected limit"
for quant in 0.025 0.160 0.500 0.840 0.975
do
  echo "#### quant = "$quant
  combine -M HybridNew --LHCmode LHC-limits {0} --expectedFromGrid $quant -T 100
done
echo "### Running observed limit"
combine -M HybridNew --LHCmode LHC-limits {0} -T 100
'''.format(card,shortcard)

  #### AymptoticLimits
  else:

#    print>>runfile,'''text2workspace.py {0} --channel-masks -o {1}.root
##### CR only fit with freeze signal strenght r=0
#combine -M MultiDimFit --saveWorkspace -n CRFit {1}.root --verbose 9 --setParameters {2},r=0 --freezeParameters r
##### Now running limit
#combine -M AsymptoticLimits higgsCombineCRFit.MultiDimFit.mH120.root -w w --snapshotName "MultiDimFit" --setParameters {3} --noFitAsimov --run blind
#'''.format(card, shortcard.replace('.txt',''), SRMasking, SRUnMasking)

    #runfile.write('combine -M AsymptoticLimits '+card+'\n')
    runfile.write('combine -M AsymptoticLimits '+card+' --run expected\n')
    runfile.write('combine -M AsymptoticLimits '+card+' --run observed\n')


  runfile.close()















